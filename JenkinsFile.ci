def incrementValue(value) {
  return value + 1
}
def  version 

pipeline {
   agent any
  environment {
    VERSION = ''
    majord = 1
    minor = 1
    }
  stages {
    stage('build') {
      steps {
        checkout([$class: 'GitSCM', branches: [[name: '*/development']], extensions: [], userRemoteConfigs: [[credentialsId: 'Keygen-ssh', url: 'git@github.com:i-dair-tech/i-dair-codex-frontend.git']]])  
      }
    }
    stage('test') {
      steps {
        sh 'npm install'
        sh 'npm run test:coverage '
            }
        }
    stage('sonarqube') {
      environment{
        sonarscaner=  tool name: 'sonar'
      }
      steps {
        sh "${sonarscaner}/bin/sonar-scanner -D sonar.login=admin -D sonar.password=idair "
      }
    }
   stage('version') {
      steps {
        script {
          if (!fileExists('front-patchs.txt')) {
            writeFile(file: 'front-patchs.txt', text: '0')
          }
          def previousValue = readFile('front-patchs.txt').trim() ?: 0
          def counter = incrementValue(previousValue.toInteger())
          writeFile(file: 'front-patchs.txt', text: counter.toString())
          if (!fileExists('majors.txt')) {
            writeFile(file: 'majors.txt', text: '0')
          }
		      if (!fileExists('minors.txt')) {
             writeFile(file: 'minors.txt', text: '0')
           }
          def next = readFile('minors.txt').trim() 
        
          def previ= readFile('majors.txt').trim() 
          def minornew =0 
          if(next <  env.minor){
                
            minornew = env.minor
            
            previousValue = 0
            counter = previousValue
            writeFile(file: 'front-patchs.txt', text: counter.toString())
          }
          else {
            minornew = next
          }
          writeFile(file: 'minors.txt', text: minornew.toString())
          def  major = 0
          if(previ <  env.majord){
            major = env.majord
            previousValue = 0
            counter = previousValue
            writeFile(file: 'front-patchs.txt', text: counter.toString())
          }
          else {
            major = previ
          }
          writeFile(file: 'majors.txt', text: major.toString())
          def patch = counter
          version = "${major}.${minornew}.${patch}"
          echo "${version}"
                 
        }
      }
    }
    stage('Release') {
      steps {
        withCredentials([file(credentialsId: 'cancer', variable: 'cancer')]) {
          sh 'git branch' 
          sh ''' #! /bin/sh
          gh auth login --with-token < ${cancer}  '''
          sh """ gh api  --method POST  -H "Accept: application/vnd.github+json"  /repos/i-dair-tech/i-dair-codex-frontend/releases -f tag_name='v'.${version}  -f target_commitish='development' -f name='v'.${version} -f body='Description of the release' -F draft=false -F prerelease=false -F generate_release_notes=false """
        }
      }
    }
        
  }
  post { 
    always { 
      echo 'I will always say end again!'
    }
  }
}
